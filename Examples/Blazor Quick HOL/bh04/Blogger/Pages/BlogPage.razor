@page "/Blog"

@using Blogger.Models
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject BlogDbContext BlogDbContext

<h3>部落格文章</h3>

@*由 C# 的變數 ShowPopup 來控制，這裡的 HTML 標記是否要顯示出來，這裡完全不需要使用到 JavaScript 或者 jQuery*@
<!-- #region 瀏覽所有紀錄 -->
<div class="my-3">
    @*透過 Blazor 的資料綁定，將新增按鈕的點選事件，綁定到 C# 的委派處理方法*@
    <!-- Todo 在此加入該按鈕的綁定事件宣告  onclick="OnAdd" -->
    <button class="btn btn-primary" @onclick="OnAdd">新增</button>
</div>

@*列出資料庫內 BlogPost 資料表內的紀錄*@
<table class="table">
    <!-- #region 在這裡填入表格的標題宣告 -->
    <thead>
        <tr>
            <!-- Todo 在此加入要顯示的每個欄位標題名稱 -->
            <th>文章</th>
            <th>修改</th>
            <th>刪除</th>
        </tr>
    </thead>
    <!-- #endregion -->
    <!-- #region 在這裡填入要顯示每筆紀錄宣告 -->
    <tbody>
        @*列出集合清單中的每一筆紀錄到 HTML Table 內*@
        <!-- Todo 在此加入要顯示的每筆紀錄的集合物件變數 foreach (var postItem in BlogPosts) -->
        @foreach (var postItem in BlogPosts)
        {
            <tr>
                <!-- #region 透過資料綁定，把集合清單內的紀錄屬性，顯示在網頁上 -->
                <!-- Todo 在此加入要每筆紀錄的欄位值 -->
                <td>@postItem.Title</td>
                <!-- #endregion -->
                <!-- #region 每筆紀錄可以進行的額外處理動作 -->
                <td>
                    @*透過 Blazor 的資料綁定，將修改按鈕的點選事件，綁定到 C# 的委派處理方法*@
                    <!-- Todo 當該修改按鈕點選事件被觸發的時候，將會把現在顯示的紀錄物件傳送過去 onclick="()=>OnEdit(postItem)" -->
                    <button class="btn btn-primary" @onclick="()=>OnEdit(postItem)">修改</button>
                </td>
                <td>
                    @*透過 Blazor 的資料綁定，將刪除按鈕的點選事件，綁定到 C# 的委派處理方法*@
                    <!-- Todo 當該刪除按鈕點選事件被觸發的時候，將會把現在顯示的紀錄物件傳送過去 onclick="async ()=>await OnDeleteAsync(postItem)" -->
                    <button class="btn btn-danger" @onclick="()=>OnShowDeleteConfirm(postItem)">刪除</button>
                </td>
                <!-- #endregion -->
            </tr>
        }
    </tbody>
    <!-- #endregion -->
</table>
<!-- #endregion -->

@if (ShowEditRecord)
{
    <!-- #region 修改當前紀錄的 UI -->
    <!-- #region 使用 Bootstrap 的標準對話窗標記宣告 -->
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document" style="max-width: 80vw">
            <div class="modal-content">
                <!-- 使用 Blazor 內建的表單和驗證功能 -->
                <!-- Todo 在此指定要編輯的紀錄物件 CurrentBlogPost -->
                <!-- Todo 指派 OnValidSubmit 事件的委派處理方法 OnValidSubmit="HandleValidSubmitAsync" -->
                <EditForm Model="CurrentBlogPost"
                          OnValidSubmit="HandleValidSubmitAsync">
                    <div class="modal-header">
                        <!-- Todo 在此指定 IsAddRecordName 字串變數，顯示當時的動作是 新增 還是 修改 -->
                        <h5 class="modal-title">@IsAddRecordName 紀錄</h5>
                        @*這裡將會宣告一個按鈕，點選這個按鈕，將會關閉此對話窗*@
                        <!-- Todo 宣告該取消按鈕綁定事件委派方法 onclick 使用 OnCalcelEditRecord ，關閉該對話窗 -->
                        <button type="button" class="close" @onclick="OnCalcelEditRecord">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @*資料批註驗證程式*@
                        <DataAnnotationsValidator />
                        @*驗證摘要和驗證訊息元件*@
                        <ValidationSummary />
                        <!-- #region 在此宣告要輸入的欄位 -->
                        <div class="form-group">
                            <!-- Todo 在此指定要編輯的欄位中文名稱 -->
                            <label class="control-label">文章主題</label>
                            <!-- Todo 在此指定要綁定的欄位屬性 bind-Value="CurrentBlogPost.Title" -->
                            <InputText class="form-control" @bind-Value="CurrentBlogPost.Title" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">文章內容</label>
                            <InputTextArea class="form-control" @bind-Value="CurrentBlogPost.Text" rows="6" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">發佈時間</label>
                            <InputDate class="form-control ml-auto" @bind-Value="CurrentBlogPost.PublishDate" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">發佈</label>
                            <InputCheckbox class="" @bind-Value="CurrentBlogPost.IsPublish" />
                        </div>
                        <!-- #endregion -->
                    </div>
                    <div class="modal-footer">
                        <!-- #region 在此宣告這筆紀錄要處理的動作 -->
                        <div class="">
                            <button type="submit" class="btn btn-primary mr-2">儲存</button>
                            <!-- Todo 當該取消按鈕點選事件被觸發的委派方法 onclick="OnCalcelEditRecord" ，關閉該對話窗 -->
                            <button class="btn btn-secondary" @onclick="OnCalcelEditRecord"> 取消 </button>
                        </div>
                        <!-- #endregion -->
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <!-- #endregion -->
    <!-- 顯示對話窗的半透明背景遮罩 -->
    <div class="modal-backdrop fade show"></div>
    <!-- #endregion -->
}

@if (ShowConfirmDeleteRecord)
{
    <!-- #region 確認是否刪除對話窗 -->
    <!-- 使用 Bootstrap 的標準對話窗標記宣告 -->
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document" style="max-width: 80vw">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">警告</h5>
                    @*這裡將會宣告一個按鈕，點選這個按鈕，將會關閉此對話窗*@
                    <!-- Todo 宣告該取消按鈕綁定事件委派方法 onclick 使用 OnCalcelEditRecord ，關閉該對話窗 -->
                    <button type="button" class="close" @onclick="OnCalcelConfirm">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <!-- #region 提示給使用者要知道的訊息內容 -->
                <div class="modal-body">
                    <div class="h3">
                        請確認是否要刪除這筆紀錄
                    </div>
                </div>
                <!-- #endregion -->
                <!-- #region 該確認對話窗可以進行的動作按鈕宣告 -->
                <div class="modal-footer">
                    <div class="">
                        <button class="btn btn-danger mr-2" @onclick="OnOkConfirmAsync">確認</button>
                        <button class="btn btn-secondary" @onclick="OnCalcelConfirm"> 取消 </button>
                    </div>
                </div>
                <!-- #endregion -->
            </div>
        </div>
    </div>
    <!-- 顯示對話窗的半透明背景遮罩 -->
    <div class="modal-backdrop fade show"></div>
    <!-- #endregion -->
}

@code {
    /// <summary>
    /// 要顯示在畫面上的集合紀錄
    /// </summary>
    public List<BlogPost> BlogPosts { get; set; } = new List<BlogPost>();
    /// <summary>
    /// 現在正在新增或者修改和刪除的當前紀錄
    /// </summary>
    public BlogPost CurrentBlogPost { get; set; } = new BlogPost();
    /// <summary>
    /// 是否顯示編輯當前紀錄的 UI
    /// </summary>
    public bool ShowEditRecord { get; set; } = false;
    /// <summary>
    /// 是否顯示確認是否要刪除的對話窗
    /// </summary>
    public bool ShowConfirmDeleteRecord { get; set; } = false;
    /// <summary>
    /// 現在操作屬於 新增 還是 修改
    /// </summary>
    public bool IsAddRecord { get; set; } = false;
    /// <summary>
    /// 對於當前紀錄的操作，是否已經取消
    /// </summary>
    public bool IsCancleRecord { get; set; } = false;
    /// <summary>
    /// 得到現在是新增或者修改模式的說明文字
    /// </summary>
    public string IsAddRecordName
    {
        get
        {
            if (IsAddRecord) return "新增";
            else return "修改";
        }
    }

    #region 元件生命週期事件
    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }
    #endregion

    #region 讀取資料庫內的紀錄
    async Task ReloadAsync()
    {
        BlogPosts = await BlogDbContext.BlogPost
        .ToListAsync();
    }
    #endregion

    #region UI 綁定事件委派方法
    void OnAdd()
    {
        CurrentBlogPost = new BlogPost();
        IsAddRecord = true;
        ShowEditRecord = true;
        IsCancleRecord = false;
    }

    void OnEdit(BlogPost postItem)
    {
        #region 複製要修該物件的值
        CurrentBlogPost = new BlogPost();
        CurrentBlogPost.Id = postItem.Id;
        CurrentBlogPost.Title = postItem.Title;
        CurrentBlogPost.Text = postItem.Text;

        CurrentBlogPost.PublishDate = postItem.PublishDate;
        #endregion

        IsAddRecord = false;
        ShowEditRecord = true;
        IsCancleRecord = false;
    }

    void OnCalcelEditRecord()
    {
        ShowEditRecord = false;
        IsCancleRecord = true;
    }

    void OnShowDeleteConfirm(BlogPost postItem)
    {
        CurrentBlogPost = postItem;
        ShowConfirmDeleteRecord = true;
        return;
    }

    async Task HandleValidSubmitAsync()
    {
        if (IsCancleRecord == true)
        {
            IsCancleRecord = false;
            return;
        }
        if (IsAddRecord == true)
        {
            await BlogDbContext.BlogPost
                .AddAsync(CurrentBlogPost);
            await BlogDbContext.SaveChangesAsync();
            await ReloadAsync();
        }
        else
        {
            BlogDbContext.ChangeTracker.Clear();
            BlogDbContext.BlogPost.Update(CurrentBlogPost);
            await BlogDbContext.SaveChangesAsync();
            await ReloadAsync();
        }
        ShowEditRecord = false;
    }
    #endregion

    #region 刪除確認對話窗的方法
    void OnCalcelConfirm()
    {
        ShowConfirmDeleteRecord = false;
    }
    async Task OnOkConfirmAsync()
    {
        ShowConfirmDeleteRecord = false;
        BlogDbContext.ChangeTracker.Clear();
        BlogDbContext.BlogPost
        .Remove(CurrentBlogPost);
        await BlogDbContext.SaveChangesAsync();
        await ReloadAsync();
    }
    #endregion
}
