@page "/Blog2"

@using Blogger.Models
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject BlogDbContext BlogDbContext
<h3>部落格文章</h3>

@*由 C# 的變數 ShowPopup 來控制，這裡的 HTML 標記是否要顯示出來，這裡完全不需要使用到 JavaScript 或者 jQuery*@
@if (ShowEditRecord)
{
    #region 修改當前紀錄的 UI
    //這裡是 BootStrap 的標準對話窗標記宣告
    <div class="modal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog" role="document" style="max-width: 80vw">
            <div class="modal-content">
                <EditForm Model="@CurrentBlogPost"
                          OnValidSubmit="@HandleValidSubmitAsync">
                    <div class="modal-header">
                        <h5 class="modal-title">@IsAddRecordName 紀錄</h5>
                        @*這裡將會宣告一個按鈕，點選這個按鈕，將會關閉此對話窗*@
                        <button type="button" class="close" @onclick="OnCalcelEditRecord">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @*資料批註驗證程式*@
                        <DataAnnotationsValidator />
                        @*驗證摘要和驗證訊息元件*@
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="taskName">文章主題</label>
                            <InputText class="form-control" @bind-Value="@CurrentBlogPost.Title" />
                        </div>
                        <div class="form-group">
                            <label for="taskName">文章內容</label>
                            <InputTextArea class="form-control" @bind-Value="@CurrentBlogPost.Text" rows="6" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="">
                            <button type="submit" class="btn btn-primary mr-2">儲存</button>
                            <button class="btn btn-secondary" @onclick="OnCalcelEditRecord"> 取消 </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    //顯示對話窗的半透明背景遮罩
    <div class="modal-backdrop fade show"></div>
    #endregion
}

<div class="my-3">
    @*透過 Blazor 的資料綁定，將新增按鈕的點選事件，綁定到 C# 的委派處理方法*@
    <input type="button" class="btn btn-primary" @onclick="OnAdd" value="新增" />
</div>

@*列出資料庫內 BlogPost 資料表內的紀錄*@
<table class="table">
    <thead>
        <tr>
            <th>文章</th>
            <th>修改</th>
            <th>刪除</th>
        </tr>
    </thead>
    <tbody>
        @*列出集合清單中的每一筆紀錄到 HTML Table 內*@
        @foreach (var postItem in BlogPosts)
        {
            <tr>
                @*透過資料綁定，把集合清單內的紀錄屬性，顯示在網頁上*@
                <td>@postItem.Title</td>
                <td>
                    @*透過 Blazor 的資料綁定，將修改按鈕的點選事件，綁定到 C# 的委派處理方法*@
                    @*當該修改按鈕點選事件被觸發的時候，將會把現在顯示的紀錄物件傳送過去*@
                    <input type="button" class="btn btn-primary" value="修改"
                           @onclick="()=>OnEdit(postItem)" />
                </td>
                <td>
                    @*透過 Blazor 的資料綁定，將刪除按鈕的點選事件，綁定到 C# 的委派處理方法*@
                    <input type="button" class="btn btn-danger" value="刪除"
                           @onclick="async ()=>await OnDeleteAsync(postItem)" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    /// <summary>
    /// 要顯示在畫面上的集合紀錄
    /// </summary>
    public List<BlogPost> BlogPosts { get; set; } = new List<BlogPost>();
    /// <summary>
    /// 現在正在新增或者修改和刪除的當前紀錄
    /// </summary>
    public BlogPost CurrentBlogPost { get; set; } = new BlogPost();
    /// <summary>
    /// 是否顯示編輯當前紀錄的 UI
    /// </summary>
    public bool ShowEditRecord { get; set; } = false;
    /// <summary>
    /// 現在操作屬於 新增 還是 修改
    /// </summary>
    public bool IsAddRecord { get; set; } = false;
    /// <summary>
    /// 得到現在是新增或者修改模式的說明文字
    /// </summary>
    public string IsAddRecordName
    {
        get
        {
            if (IsAddRecord) return "新增";
            else return "修改";
        }
    }

    #region 元件生命週期事件
    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }
    #endregion

    #region 讀取資料庫內的紀錄
    async Task Reload()
    {
        BlogPosts = await BlogDbContext.BlogPost
        .ToListAsync();
    }
    #endregion

    #region UI 綁定事件委派方法
    void OnAdd()
    {
        CurrentBlogPost = new BlogPost();
        IsAddRecord = true;
        ShowEditRecord = true;
    }

    void OnEdit(BlogPost postItem)
    {
        CurrentBlogPost = postItem;
        IsAddRecord = false;
        ShowEditRecord = true;
    }

    void OnCalcelEditRecord()
    {
        ShowEditRecord = false;
    }

    async Task OnDeleteAsync(BlogPost postItem)
    {
        BlogDbContext.BlogPost
            .Remove(postItem);
        await BlogDbContext.SaveChangesAsync();
        await Reload();
        return;
    }

    async Task HandleValidSubmitAsync()
    {
        if (IsAddRecord == true)
        {
            await BlogDbContext.BlogPost
                .AddAsync(CurrentBlogPost);
            await BlogDbContext.SaveChangesAsync();
            await Reload();
        }
        else
        {
            BlogDbContext.BlogPost.Update(CurrentBlogPost);
            await BlogDbContext.SaveChangesAsync();
            await Reload();
        }
        ShowEditRecord = false;
    }
    #endregion
}
