@page "/Blog3"

@using Blogger.Models
@using System.Linq
@using Microsoft.EntityFrameworkCore
@inject BlogDbContext BlogDbContext
<h3>部落格文章</h3>

<div class="my-3">
    @*透過 Blazor 的資料綁定，將新增按鈕的點選事件，綁定到 C# 的委派處理方法*@
    <input type="button" class="btn btn-primary" @onclick="OnAdd" value="新增" />
</div>

@*列出資料庫內 BlogPost 資料表內的紀錄*@
<table class="table">
    <thead>
        <tr>
            <th>文章</th>
            <th>修改</th>
            <th>刪除</th>
        </tr>
    </thead>
    <tbody>
        @*列出集合清單中的每一筆紀錄到 HTML Table 內*@
        @foreach (var postItem in BlogPosts)
        {
            <tr>
                @*透過資料綁定，把集合清單內的紀錄屬性，顯示在網頁上*@
                <td>@postItem.Title</td>
                <td>
                    @*透過 Blazor 的資料綁定，將修改按鈕的點選事件，綁定到 C# 的委派處理方法*@
                    @*當該修改按鈕點選事件被觸發的時候，將會把現在顯示的紀錄物件傳送過去*@
                    <input type="button" class="btn btn-primary" value="修改"
                           @onclick="()=>OnEdit(postItem)" />
                </td>
                <td>
                    @*透過 Blazor 的資料綁定，將刪除按鈕的點選事件，綁定到 C# 的委派處理方法*@
                    <input type="button" class="btn btn-danger" value="刪除"
                           @onclick="async ()=>OnShowDeleteConfirm(postItem)" />
                </td>
            </tr>
        }
    </tbody>
</table>

<Post3RecordDialogView CurrentBlogPost="CurrentBlogPost"
                       IsAddRecord="IsAddRecord" ShowEditRecord="ShowEditRecord"
                       RecordEditCallback="OnRecordEditAsync" />

<DeleteConfirmDialogView ShowConfirmDeleteRecord="ShowConfirmDeleteRecord"
                         ConfirmCallback="OnConfirmDialogAsync" />

@code {
    /// <summary>
    /// 要顯示在畫面上的集合紀錄
    /// </summary>
    public List<BlogPost> BlogPosts { get; set; } = new List<BlogPost>();
    /// <summary>
    /// 現在正在新增或者修改和刪除的當前紀錄
    /// </summary>
    public BlogPost CurrentBlogPost { get; set; } = new BlogPost();
    /// <summary>
    /// 是否顯示編輯當前紀錄的 UI
    /// </summary>
    public bool ShowEditRecord { get; set; } = false;
    /// <summary>
    /// 是否顯示確認是否要刪除的對話窗
    /// </summary>
    public bool ShowConfirmDeleteRecord { get; set; } = false;
    /// <summary>
    /// 現在操作屬於 新增 還是 修改
    /// </summary>
    public bool IsAddRecord { get; set; } = false;
    /// <summary>
    /// 得到現在是新增或者修改模式的說明文字
    /// </summary>
    public string IsAddRecordName
    {
        get
        {
            if (IsAddRecord) return "新增";
            else return "修改";
        }
    }

    #region 元件生命週期事件
    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }
    #endregion

    #region 讀取資料庫內的紀錄
    async Task Reload()
    {
        BlogPosts = await BlogDbContext.BlogPost
        .ToListAsync();
    }
    #endregion

    #region UI 綁定事件委派方法
    void OnAdd()
    {
        CurrentBlogPost = new BlogPost();
        IsAddRecord = true;
        ShowEditRecord = true;
    }

    void OnEdit(BlogPost postItem)
    {
        CurrentBlogPost = postItem;
        IsAddRecord = false;
        ShowEditRecord = true;
    }

    async Task OnRecordEditAsync(bool recordChanged)
    {
        if (recordChanged == true)
        {
            if (IsAddRecord == true)
            {
                await BlogDbContext.BlogPost
                    .AddAsync(CurrentBlogPost);
                await BlogDbContext.SaveChangesAsync();
                await Reload();
            }
            else
            {
                BlogDbContext.BlogPost.Update(CurrentBlogPost);
                await BlogDbContext.SaveChangesAsync();
                await Reload();
            }
        }
        ShowEditRecord = false;
    }

    void OnShowDeleteConfirm(BlogPost postItem)
    {
        CurrentBlogPost = postItem;
        ShowConfirmDeleteRecord = true;
        return;
    }
    #endregion

    #region 刪除確認對話窗的方法
    async Task OnConfirmDialogAsync(bool confirm)
    {
        ShowConfirmDeleteRecord = false;
        if (confirm == true)
        {
            BlogDbContext.BlogPost
                .Remove(CurrentBlogPost);
            await BlogDbContext.SaveChangesAsync();
            await Reload();
        }
    }
    #endregion
}
