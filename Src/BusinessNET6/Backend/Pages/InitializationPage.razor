@page "/Initialization"
@using Microsoft.Extensions.Configuration;
@using Microsoft.EntityFrameworkCore;
@using System.Threading.Tasks
@using System.Threading
@using System.Diagnostics
@using Microsoft.Extensions.Options
@using Syncfusion.Blazor.Buttons

@inject IWebHostEnvironment env
@inject DatabaseInitService DatabaseInitService
@inject BackgroundExecuteMode BackgroundExecuteMode
@inject IOptions<BackendInitializer> BackendInitializer
@inject IExportDataService ExportDataService

@layout EmptyLayout

@using System.Security.Claims
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups

<h1 class="bg-success text-white-50 my-1">資料庫初始化作業!</h1>

<environment include="Staging,Production">
    @if (verified == false)
    {
        <div>
            <div class="h2 text-success">@Question</div>
            <p>請輸入驗證碼</p>
            <div class="input-group mb-3">
                <input type="text" class="form-control"
                   placeholder="驗證碼" aria-label="Username" aria-describedby="basic-addon1"
                   @bind="verifyCode">
            </div>
            <div class="input-group mb-3">
                <SfButton CssClass="e-primary"
                    @onclick="OnVerifyCode">
                    送出
                </SfButton>
            </div>
        </div>
    }
</environment>

@if (verified)
{
    <div class="card mb-4">
        <div class="card mb-4">
            <div class="card-header bg-danger text-white">
                <span class="h2">匯出預設資料庫紀錄</span>
            </div>
            <article class="card-body bg-light">
                <div>
                    <SfButton CssClass="e-danger mb-4" @onclick="OutputJsonAsync">產生 JSON 檔案</SfButton>
                </div>
            </article>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card mb-4">
            <div class="card-header bg-danger text-white">
                <span class="h2">資料庫初始化</span>
            </div>
            <article class="card-body bg-light">
                <div class="mb-4">
                    <SfDropDownList TValue="string" TItem="InitMode" Placeholder="初始化模式"
                                @bind-Value=InitializationMode
                                DataSource="@InitializationModeSet">
                        <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div>
                    <SfButton CssClass="e-danger mb-4" @onclick="InitDB">資料庫重新建立</SfButton>
                </div>
                <div>
                    <SfButton CssClass="e-danger" @onclick="Init">資料庫重新建立與資料初始化</SfButton>
                </div>
            </article>
            <div>
                @foreach (var msg in Messages)
                {
                    <div>@msg</div>
                }
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-header bg-secondary text-white">
                <span class="h2">採用 Excel 匯入</span>
            </div>
            <article class="card-body bg-light">
                <div>
                    <ImportView />
                </div>
            </article>
        </div>
        <div class="card mb-4">
            <div class="card-header bg-success text-white">
                <span class="h2">取得密碼與SALT</span>
            </div>
            <article class="card-body bg-light">
                <div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">新密碼</label>
                            <SfTextBox @bind-Value="NewPassword"
                                   Placeholder="請輸入密碼" />
                        </div>
                    </div>
                </div>
                <div>
                    <SfButton CssClass="e-primary" @onclick="OnNewPassword">產生編碼密碼</SfButton>
                </div>
            </article>
            <div class="card-footer">
                <div>Slat&nbsp;:&nbsp;@Slat</div>
                <div>EncodePassword&nbsp;:&nbsp;@EncodePassword</div>
            </div>
        </div>
    </div>
}

<div id="container">
    <SfSpinner @bind-Visible="@VisibleProperty">
    </SfSpinner>
</div>


@code {
    bool verified = false;
    string verifyCode = "";
    int Question = 0;
    bool VisibleProperty = false;
    public string NewPassword { get; set; } = "";
    public string Slat { get; set; }
    public string EncodePassword { get; set; }
    public List<InitMode> InitializationModeSet { get; set; } = new();
    public string InitializationMode { get; set; }
    List<string> Messages = new();

    protected override void OnInitialized()
    {
        Question = new Random().Next(10000, 90000);
        if (env.IsDevelopment())
        {
            verified = true;
            verifyCode = Question.ToString();
        }
        InitializationModeSet.Add(new InitMode() { Id = 1, Name = "開發模式" });
        InitializationModeSet.Add(new InitMode() { Id = 2, Name = "正式模式" });
        InitializationMode = InitializationModeSet[1].Name;
    }
    public async Task OutputJsonAsync()
    {
        this.VisibleProperty = true;
        string jsonPath = Path.Combine(env.ContentRootPath, "InitData", "Default.json");
        await Task.Delay(3000);
        await ExportDataService.WriteToDirectoryAsync(jsonPath);
        this.VisibleProperty = false;
    }
    public async Task InitDB()
    {
        this.VisibleProperty = true;
        BackgroundExecuteMode.IsInitialization = true;
        await Task.Delay(1000);
        string jsonPath = Path.Combine(env.ContentRootPath, "InitData", "Default.json");
        await DatabaseInitService.InitDBAsync(jsonPath, UpdateMessage);
        this.VisibleProperty = false;
        BackgroundExecuteMode.IsInitialization = false;
    }
    public async Task Init()
    {
        Messages.Clear();
        this.VisibleProperty = true;
        BackgroundExecuteMode.IsInitialization = true;
        await Task.Delay(3000);
        await DatabaseInitService.InitDataAsync(InitializationMode, UpdateMessage);
        this.VisibleProperty = false;
        BackgroundExecuteMode.IsInitialization = false;
    }
    void UpdateMessage(string message)
    {
        Messages.Add(message);
        StateHasChanged();
    }
    void OnVerifyCode()
    {
        try
        {
            int verifyNumber = 0;
            int answer = 0;
            verifyNumber = Convert.ToInt32(verifyCode);
            BackendInitializer BackendInitializerObject = BackendInitializer.Value;
            answer = BackendInitializerObject.SeedNumber - Question;
            if (verifyNumber == answer)
            {
                verified = true;
            }
        }
        catch { }
    }
    void OnNewPassword()
    {
        Slat = Guid.NewGuid().ToString();
        EncodePassword =
        PasswordHelper.GetGodPasswordSHA(Slat, NewPassword);
    }

    public class InitMode
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}
