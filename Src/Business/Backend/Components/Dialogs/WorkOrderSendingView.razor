@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs

@inject IPolicyHeaderService PolicyHeaderService

<SfDialog @bind-Visible="@OpenPicker" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>@DialogTitle</Header>
        <Content>
            <div class="mb-4">
                <div class="">
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">
                                簽核流程政策
                            </label>
                            <SfDropDownList TValue="int" TItem="PolicyHeaderAdapterModel"
                                            @bind-Value="PolicyHeaderId"
                                            Placeholder="簽核流程政策"
                                            DataSource="@AllPolicyHeaders">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" TItem="PolicyHeaderAdapterModel"/>
                            </SfDropDownList>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">
                                批示摘要
                                <span class="mdi mdi-24px mdi-magnify"
                                      @onclick="OnSummaryPhaseMessageOpenPicker"></span>
                            </label>
                            <SfTextBox @bind-Value="ApproveOpinionModel.Summary"
                                       Placeholder="請輸 批示摘要" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">
                                批示意見
                                <span class="mdi mdi-24px mdi-magnify"
                                      @onclick="OnCommentPhaseMessageOpenPicker"></span>
                            </label>
                            <SfTextBox @bind-Value="ApproveOpinionModel.Comment"
                                       Multiline="true"
                                       Placeholder="請輸 批示意見" />
                        </div>
                    </div>

                </div>
            </div>
        </Content>
        <FooterTemplate>
            <button @onclick="@OnPickerOK" class='btn btn-primary'>確認</button>
            <button @onclick="@OnPickerCancel" class='btn btn-secondary'>取消</button>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<PhaseMessagePicker OpenPicker="ShowPhaseMessageDialog"
                    OnConfirmCallback="x=>OnPhaseMessageCompletion(x)" />

<MessageBox Height="400" Width="600" IsVisible="@ShowMessageBox"
            Title="@MessageBoxTitle" Message="@MessageBoxBody"
            Callback="x=>ShowMessageBox =false" />

<DialogBackground />

@code{
    private bool openPicker = false;

    [Parameter]
    public bool OpenPicker
    {
        get { return openPicker; }
        set
        {
            openPicker = value;
            if (openPicker == true)
            {
                ApproveOpinionModel = new ApproveOpinionModel();
                //ApproveOpinionModel.Summary = "";
                //ApproveOpinionModel.Comment = "";
            }
        }
    }

    string DialogTitle = "填寫簽核政策與意見";
    [Parameter]
    public EventCallback<ApproveOpinionModel> OnConfirmCallback { get; set; }
    public bool ShowMessageBox { get; set; } = false;
    public string MessageBoxBody { get; set; } = "";
    public string MessageBoxTitle { get; set; } = "";
    public ApproveOpinionModel ApproveOpinionModel { get; set; } = new ApproveOpinionModel();
    public bool ShowPhaseMessageDialog { get; set; } = false;
    public bool IsSummary = false;
    public List<PolicyHeaderAdapterModel> AllPolicyHeaders { get; set; }
    public int PolicyHeaderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AllPolicyHeaders = await PolicyHeaderService.GetAsync();
        PolicyHeaderId = AllPolicyHeaders[0].Id;
    }

    public void ShowDialog()
    {
        ApproveOpinionModel = new ApproveOpinionModel();
        OpenPicker = true;
    }

    async Task OnPickerOK()
    {
        if (string.IsNullOrEmpty(ApproveOpinionModel.Summary))
        {
            ApproveOpinionModel.Summary = "無 批示摘要";
        }
        if (string.IsNullOrEmpty(ApproveOpinionModel.Comment))
        {
            ApproveOpinionModel.Comment = "無 批示意見";
        }

        var fooItem = AllPolicyHeaders.FirstOrDefault(x => x.Id == PolicyHeaderId);
        ApproveOpinionModel.PolicyHeaderAdapterModel = fooItem;
        await OnConfirmCallback.InvokeAsync(ApproveOpinionModel);
    }
    async Task OnPickerCancel()
    {
        await OnConfirmCallback.InvokeAsync(null);
    }

    public void OnSummaryPhaseMessageOpenPicker()
    {
        ShowPhaseMessageDialog = true;
        IsSummary = true;
    }
    public void OnCommentPhaseMessageOpenPicker()
    {
        ShowPhaseMessageDialog = true;
        IsSummary = false;
    }
    public void OnPhaseMessageCompletion(PhaseMessageAdapterModel e)
    {
        if (e != null)
        {
            if (IsSummary == true)
            {
                ApproveOpinionModel.Summary += $" {e.Content}";
                ApproveOpinionModel.Summary = ApproveOpinionModel.Summary.Trim();
            }
            else
            {
                ApproveOpinionModel.Comment += $" {e.Content}";
                ApproveOpinionModel.Comment = ApproveOpinionModel.Comment.Trim();
            }
        }
        ShowPhaseMessageDialog = false;
    }
}
