@using Microsoft.Extensions.Configuration;
@using Microsoft.EntityFrameworkCore;
@using System.Threading.Tasks
@using System.Threading
@using System.Diagnostics
@using Microsoft.AspNetCore.Http

@inject DatabaseInitService DatabaseInitService
@inject BackendDBContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebHostEnvironment env
@inject IConfiguration configuration
@inject IJSRuntime JSRuntime
@inject BlazorAppContext BlazorAppContext
@inject IHttpContextAccessor httpContextAccessor

@implements IDisposable

@using System.Security.Claims
@using Microsoft.AspNetCore.Hosting
@using Syncfusion.Blazor.Spinner

<h1>Hello 你好, 超全端程式設計 Blazor 專案範本!</h1>

<div class="card mb-4">
    <div class="card-header bg-success text-white">
        <span class="h2">專案版本資訊</span>
    </div>
    <article class="card-body bg-light">
        <div class="h1">
            @versionNumber
        </div>
        <div class="h3">
            來源 IP : <span>@IP</span>
        </div>
    </article>
</div>

<div class="card mb-4">
    <div class="card-header bg-dark text-white">
        <span class="h2">專案原始碼</span>
    </div>
    <article class="card-body bg-light">
        <div class="mb-4">
            <a href="https://github.com/vulcanlee/Blazor-Xamarin-Full-Stack-HOL/" target="_blank"> Blazor 超全端程式設計專案原始碼 </a>
        </div>
        <div class="mb-4">
            <a href="https://csharpkh.blogspot.com/" target="_blank"> 更多部落格文章 </a>
        </div>
        <div class="mb-4">
            <a href="https://www.facebook.com/vulcanlabtw" target="_blank"> 歡迎加入 Xamarin Blazor 實驗室 粉絲團 </a>
        </div>
        <div class="">
            <a href="https://www.facebook.com/groups/201660094303797" target="_blank"> 歡迎加入 Xamarin Blazor 討論社團 </a>
        </div>
    </article>
</div>

<div id="container">
    <SfSpinner @bind-Visible="@VisibleProperty">
    </SfSpinner>
</div>


@code {
    private bool VisibleProperty { get; set; } = false;
    string authMessage = "";
    string userId = "";
    string versionNumber = "";
    string EmergenceDebugMessage = "";
    CancellationTokenSource cts;
    string IP;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IP = httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();
            cts = new CancellationTokenSource();
            bool EmergenceDebugStatus = Convert.ToBoolean(configuration["EmergenceDebug"]);
            EmergenceDebugMessage = EmergenceDebugStatus == true ? "啟用" : "停用";
            Version version = System.Reflection.Assembly.GetEntryAssembly().GetName().Version;
            versionNumber = version.ToString();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                authMessage = $"現在登入的使用者為 {user.Identity.Name}";
                IEnumerable<Claim> _claims = user.Claims;
                userId =
                $"該使用者在資料庫內的 Id 為: {user.FindFirst(c => c.Type == ClaimTypes.Sid)?.Value}";
            }
            else
            {
                authMessage = "沒有任何使用者登入";
                userId = "";
            }

            #region 測試緊急除錯功能
            if (EmergenceDebugStatus == true)
            {
                var users = await context.MyUser.ToListAsync();
            }
            #endregion
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
    }
    public async Task Init()
    {
        this.VisibleProperty = true;
        await DatabaseInitService.InitDataAsync();
        this.VisibleProperty = false;
    }
    void StopMeasureRTT()
    {
        cts.Cancel();
    }
    void IDisposable.Dispose()
    {
        if (cts != null)
            cts.Cancel();
    }
}
