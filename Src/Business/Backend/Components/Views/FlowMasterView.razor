@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using System.Security.Claims

@inject FlowMasterViewModel ViewModel
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserHelper UserHelper
@inject CurrentUser CurrentUser

@implements IRazorPage
@implements IDataGrid

@if (ViewModel.IsGod)
{
    <div>
        <span>@ViewModel.CurrentUserHelper.CustomUserName</span>
        <button class="btn btn-danger" @onclick="ViewModel.OnOpenSimulatorUserPicker">
            選取使用者
        </button>
    </div>
}

<div>
    <SfGrid @ref="Grid" TValue="FlowMasterAdapterModel"
            AllowPaging="true" class="parentFullWidth"  AllowTextWrap="true"
            Toolbar="ViewModel.Toolbaritems">
        <SfDataManager Adaptor="Adaptors.CustomAdaptor">
            <FlowMasterAdapter CurrentSortCondition="@ViewModel.CurrentSortCondition"></FlowMasterAdapter>
        </SfDataManager>
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem Type="ItemType.Input">
                    <Template>
                        <span class="mx-2 mdi mdi-18px mdi-sort-variant" />
                        <SfDropDownList TValue="int" TItem="SortCondition"
                                        Placeholder="選擇排序條件" DataSource="@ViewModel.SortConditions">
                            <DropDownListFieldSettings Value="Id" Text="Title"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int" TItem="SortCondition" ValueChange="@ViewModel.SortChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
        <GridEvents CommandClicked="ViewModel.OnCommandClicked" TValue="FlowMasterAdapterModel"
                    OnToolbarClick="ViewModel.ToolbarClickHandler" />
        <GridPageSettings PageSize="@PageSize" />
        <GridColumns>
            <GridColumn Field=@nameof(FlowMasterAdapterModel.Code)
                        HeaderText="代碼" Width="130" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.Title)
                        HeaderText="主旨" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.ProcessLevel)
                        HeaderText="層級" Width="70" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.StatusName)
                        HeaderText="狀態" Width="70" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.CreateDate)
                        HeaderText="建立時間" Format="yyyy-MM-dd HH:mm:ss"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.MyUserName)
                        HeaderText="建立者"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.PolicyHeaderName)
                        HeaderText="簽核政策" Format="yyyy-MM-dd"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.NextMyUserName)
                        HeaderText="批示者"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(FlowMasterAdapterModel.StatusName) HeaderText="簽核" Width="120">
                <Template>
                    @{
                        var currentRec = (context as FlowMasterAdapterModel);
                        if (ViewModel.CheckFlowAction(currentRec))
                        {
                            if (currentRec.UserShowAction == true)
                            {
                                if (currentRec.Status == 0)
                                {
                                    var tpa1 = $"tpa{currentRec.Id}";
                                    var tpa2 = $"#{tpa1}";
                                    <SfTooltip Target="@tpa2" Content="送出">
                                        <span id="@tpa1" class="mdi mdi-24px mdi-send-circle text-primary"
                                              @onclick="async () => { await ViewModel.SendAsync(currentRec); }" />
                                    </SfTooltip>
                                }
                                else if (currentRec.Status == 99)
                                {
                                }
                                else
                                {
                                    var tpb1 = $"tpa{currentRec.Id}";
                                    var tpb2 = $"#{tpb1}";
                                    var tpc1 = $"tpa{currentRec.Id}";
                                    var tpc2 = $"#{tpc1}";
                                    var tpd1 = $"tpa{currentRec.Id}";
                                    var tpd2 = $"#{tpd1}";
                                    <div>
                                        <span>
                                            <SfTooltip Target="@tpb2" Content="退回申請者"
                                                       style="display: inline-block;"
                                                       @onclick="async () => { await ViewModel.BackToSendAsync(currentRec); }">
                                                <span id="@tpb1" class="mdi mdi-24px mdi-arrow-left-bold-circle mr-1 text-secondary flow-acton-icon" />
                                            </SfTooltip>
                                        </span>
                                        <span>
                                            <SfTooltip Target="@tpc2" Content="同意"
                                                       style="display: inline-block;">
                                                <span id="@tpc1" class="mdi mdi-24px mdi-check-circle mr-1 text-success flow-acton-icon"
                                                      @onclick="async () => { await ViewModel.AgreeAsync(currentRec); }" />
                                            </SfTooltip>
                                        </span>
                                        <span>
                                            <SfTooltip Target="@tpd2" Content="退回"
                                                       style="display: inline-block;">
                                                <span id="@tpd1" class="mdi mdi-24px mdi-close-circle text-danger flow-acton-icon"
                                                      @onclick="async () => { await ViewModel.DenyAsync(currentRec); }" />
                                            </SfTooltip>
                                        </span>
                                    </div>
                                }
                            }
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="命令" Width="200" TextAlign="@TextAlign.Center">
                <GridCommandColumns>
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameShowFlowHistory"
                                       ButtonOption="@(new CommandButtonOptions()
                                                       { Content = "", IconCss = @ButtonIdHelper.ButtonIdShowFlowHistory})" />
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameShowFlowUser"
                                       ButtonOption="@(new CommandButtonOptions()
                                                       { Content = "", IconCss = @ButtonIdHelper.ButtonIdShowFlowUser})" />
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameEdit"
                                       ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = @ButtonIdHelper.ButtonIdEdit})" />
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameDelete"
                                       ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = ButtonIdHelper.ButtonIdDelete})" />
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<SfDialog @bind-Visible="@ViewModel.IsShowEditRecord" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>@ViewModel.EditRecordDialogTitle</Header>
        <Content>
            <EditForm Model="@ViewModel.CurrentRecord">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputWatcher EditContextActionChanged="@ViewModel.OnEditContestChanged" />

                <div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">主旨</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Title"
                                       Placeholder="請輸主旨名稱" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Title)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">說明</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Content"
                                       Placeholder="請輸說明內容" Multiline="true" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Content)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">建立時間</label>
                            <SfDateTimePicker TValue="DateTime"
                                              @bind-Value="ViewModel.CurrentRecord.CreateDate"
                                              Format="yyyy-MM-dd hh:mm:ss"
                                              Placeholder="請選擇一個日期、時間" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.CreateDate)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">
                                建立者
                                <span class="mdi mdi-24px mdi-magnify"
                                      @onclick="ViewModel.OnOpenPicker"></span>
                            </label>
                            <SfTextBox Value="@ViewModel.CurrentRecord.MyUserName"
                                       Enabled="false"></SfTextBox>
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.MyUserName)" />
                        </div>
                    </div>

                    @if (ViewModel.IsNewRecordMode == true)
                    {
                        <div class="form-row">
                            <div class="form-group col">
                                <label class="control-label">
                                    簽核政策
                                    <span class="mdi mdi-24px mdi-magnify"
                                          @onclick="ViewModel.OnOpenPolicyPicker"></span>
                                </label>
                                <SfTextBox Value="@ViewModel.CurrentRecord.PolicyHeaderName"
                                           Enabled="false"></SfTextBox>
                                <ValidationMessage For="@(() => ViewModel.CurrentRecord.PolicyHeaderName)" />
                            </div>
                        </div>
                    }

                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div>
                <button type="submit" class="btn btn-primary" @onclick="ViewModel.OnRecordEditConfirm">儲存</button>
                <button class="btn btn-secondary" @onclick="ViewModel.OnRecordEditCancel">取消</button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<SfDialog @bind-Visible="@ViewModel.IsShowFlowUserRecord" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>@ViewModel.ShowMoreDetailsRecordDialogTitle</Header>
        <Content>
            <FlowUserReadOnlyView @ref="ViewModel.ShowFlowUserGrid" PageSize="@MagicHelper.GridPageSize"
                                  Header="ViewModel.Header" />
        </Content>
        <FooterTemplate>
            <div>
                <button class="btn btn-secondary" @onclick="()=> { ViewModel.IsShowFlowUserRecord = false; }">關閉</button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<SfDialog @bind-Visible="@ViewModel.IsShowFlowHistoryRecord" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>@ViewModel.ShowMoreDetailsRecordDialogTitle</Header>
        <Content>
            <FlowHistoryReadOnlyView @ref="ViewModel.ShowFlowHistoryGrid" PageSize="@MagicHelper.GridPageSize"
                                     Header="ViewModel.Header" />
        </Content>
        <FooterTemplate>
            <div>
                <button class="btn btn-secondary" @onclick="()=> { ViewModel.IsShowFlowHistoryRecord = false; }">關閉</button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<FlowApproveView OpenPicker="ViewModel.ShowApproveOpinionDialog"
                 OnConfirmCallback="x=>ViewModel.OnShowApproveOpinionDialogCompletion(x)" />

<MyUserPicker OpenPicker="ViewModel.ShowSimulatorUserPicker"
              OnConfirmCallback="x=>ViewModel.OnPickerSimulatorUserCompletion(x)" />

<MyUserPicker OpenPicker="ViewModel.ShowAontherRecordPicker"
              OnConfirmCallback="x=>ViewModel.OnPickerCompletion(x)" />

<PolicyHeaderPicker OpenPicker="ViewModel.ShowPolicyRecordPicker"
                    OnConfirmCallback="x=>ViewModel.OnPickerPolicyCompletion(x)" />


<MessageBox Height="@ViewModel.MessageBox.Height" Width="@ViewModel.MessageBox.Width"
            IsVisible="@ViewModel.MessageBox.IsVisible"
            Title="@ViewModel.MessageBox.Title" Message="@ViewModel.MessageBox.Body"
            Callback="ViewModel.MessageBox.MessageCallbackDelegate" />

<ConfirmBox Height="@ViewModel.ConfirmMessageBox.Height" Width="@ViewModel.ConfirmMessageBox.Width"
            IsVisible="@ViewModel.ConfirmMessageBox.IsVisible"
            Title="@ViewModel.ConfirmMessageBox.Title" Message="@ViewModel.ConfirmMessageBox.Body"
            Callback="ViewModel.ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code{
    SfGrid<FlowMasterAdapterModel> Grid;
    [Parameter]
    public int PageSize { get; set; } = 15;
    [Parameter]
    public EventCallback<MasterRecord> OnRecordChanged { get; set; }
    [Parameter]
    public EventCallback<object> OnViewRender { get; set; }

    #region 生命週期事件
    protected override void OnInitialized()
    {
        ViewModel.Setup(this, this);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            ViewModel.Setup(this, this);
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                #region 使用者已經登入了
                var userAccount = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (userAccount.ToLower() == MagicHelper.開發者帳號.ToString())
                {
                    ViewModel.IsGod = true;
                    StateHasChanged();
                }
                #endregion
            }
        }
        if (OnViewRender.HasDelegate)
        {
            await OnViewRender.InvokeAsync(null);
        }
    }
    #endregion

    #region 頁面需要介面實作
    public void NeedRefresh()
    {
        StateHasChanged();
    }
    public async Task NeedInvokeAsync(System.Action action)
    {
        await InvokeAsync(action);
    }
    public void RefreshGrid()
    {
        Grid?.Refresh();
    }
    public bool GridIsExist()
    {
        return Grid == null ? false : true;
    }
    public Task InvokeGridAsync(string actionName)
    {
        return Task.CompletedTask;
    }
    #endregion
}
