@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons

@inject PolicyDetailViewModel ViewModel
@implements IRazorPage
@implements IDataGrid

<div>
    <SfGrid @ref="Grid" TValue="PolicyDetailAdapterModel"
            AllowPaging="true"
            Toolbar="ViewModel.Toolbaritems">
        <SfDataManager Adaptor="Adaptors.CustomAdaptor">
            <PolicyDetailAdapter CurrentSortCondition="@ViewModel.CurrentSortCondition"
                                 HeaderID="@ViewModel.Header.Id"></PolicyDetailAdapter>
        </SfDataManager>
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem Type="ItemType.Input">
                    <Template>
                        <span class="mx-2 mdi mdi-18px mdi-sort-variant" />
                        <SfDropDownList TValue="int" TItem="SortCondition"
                                        Placeholder="選擇排序條件" DataSource="@ViewModel.SortConditions">
                            <DropDownListFieldSettings Value="Id" Text="Title"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int" TItem="SortCondition" ValueChange="@ViewModel.SortChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
        <GridEvents CommandClicked="ViewModel.OnCommandClicked" TValue="PolicyDetailAdapterModel"
                    OnToolbarClick="ViewModel.ToolbarClickHandler" />
        <GridPageSettings PageSize="@PageSize" />
        <GridColumns>
            <GridColumn Field=@nameof(PolicyDetailAdapterModel.Name)
                        HeaderText="簽核項目名稱" />
            <GridColumn Field=@nameof(PolicyDetailAdapterModel.Level)
                        HeaderText="階層"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(PolicyDetailAdapterModel.MyUserName)
                        HeaderText="使用者"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(PolicyDetailAdapterModel.Enable)
                        HeaderText="狀態" Width="70">
                <Template>
                    @{
                        var currentRec = (context as PolicyDetailAdapterModel);
                        if (currentRec.Enable == true)
                        {
                            <span class="oi oi-play-circle mx-2 text-success"
                                  @onclick="x=>ViewModel.DisableIt(currentRec)" />
                        }
                        else
                        {
                            <span class="oi oi-media-stop mx-2 text-danger"
                                  @onclick="x=>ViewModel.EnableIt(currentRec)" />
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="命令" Width="110" TextAlign="@TextAlign.Center">
                <GridCommandColumns>
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameEdit"
                                       ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = @ButtonIdHelper.ButtonIdEdit})" />
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameDelete"
                                       ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = ButtonIdHelper.ButtonIdDelete})" />
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<SfDialog @bind-Visible="@ViewModel.IsShowEditRecord" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>@ViewModel.EditRecordDialogTitle</Header>
        <Content>
            <EditForm Model="@ViewModel.CurrentRecord">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputWatcher EditContextActionChanged="@ViewModel.OnEditContestChanged" />

                <div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">名稱</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Name" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Name)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">階層</label>
                            <SfNumericTextBox @bind-Value="ViewModel.CurrentRecord.Level"
                                              Placeholder="請輸入大於0的整數數值" Min="1" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Level)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">
                                使用者
                                <span class="mdi mdi-24px mdi-magnify"
                                      @onclick="ViewModel.OnOpenPicker"></span>
                            </label>
                            <SfTextBox Value="@ViewModel.CurrentRecord.MyUserName"
                                       Enabled="false"></SfTextBox>
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.MyUserName)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">知會</label>
                            <SfCheckBox @bind-Checked="@ViewModel.CurrentRecord.OnlyCC" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.OnlyCC)" />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">啟用</label>
                            <SfCheckBox @bind-Checked="@ViewModel.CurrentRecord.Enable" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Enable)" />
                        </div>
                    </div>

                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div>
                <button type="submit" class="btn btn-primary" @onclick="ViewModel.OnRecordEditConfirm">儲存</button>
                <button class="btn btn-secondary" @onclick="ViewModel.OnRecordEditCancel">取消</button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<MyUserPicker OpenPicker="ViewModel.ShowAontherRecordPicker"
               OnConfirmCallback="x=>ViewModel.OnPickerCompletion(x)" />

<MessageBox Height="@ViewModel.MessageBox.Height" Width="@ViewModel.MessageBox.Width"
            IsVisible="@ViewModel.MessageBox.IsVisible"
            Title="@ViewModel.MessageBox.Title" Message="@ViewModel.MessageBox.Body"
            Callback="ViewModel.MessageBox.MessageCallbackDelegate" />

<ConfirmBox Height="@ViewModel.ConfirmMessageBox.Height" Width="@ViewModel.ConfirmMessageBox.Width"
            IsVisible="@ViewModel.ConfirmMessageBox.IsVisible"
            Title="@ViewModel.ConfirmMessageBox.Title" Message="@ViewModel.ConfirmMessageBox.Body"
            Callback="ViewModel.ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />

@code{
    SfGrid<PolicyDetailAdapterModel> Grid;
    [Parameter]
    public MasterRecord Header { get; set; } = new MasterRecord();
    [Parameter]
    public int PageSize { get; set; } = 15;
    [Parameter]
    public EventCallback<MasterRecord> OnRecordChanged { get; set; }
    [Parameter]
    public EventCallback<object> OnViewRender { get; set; }

    #region 生命週期事件
    protected override void OnInitialized()
    {
        ViewModel.Setup(this, this);
    }
    protected override void OnParametersSet()
    {
        if (Header != null)
        {
            ViewModel.Header = Header;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            ViewModel.Setup(this, this);
        }
        if (OnViewRender.HasDelegate)
        {
            await OnViewRender.InvokeAsync(null);
        }
    }
    #endregion

    #region 頁面需要介面實作
    public void NeedRefresh()
    {
        StateHasChanged();
    }
    public async Task NeedInvokeAsync(System.Action action)
    {
        await InvokeAsync(action);
    }
    public void RefreshGrid()
    {
        Grid?.Refresh();
    }
    public bool GridIsExist()
    {
        return Grid == null ? false : true;
    }
    public Task InvokeGridAsync(string actionName)
    {
        return Task.CompletedTask;
    }
    #endregion

}
