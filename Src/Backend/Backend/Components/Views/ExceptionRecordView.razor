@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Calendars

@inject ExceptionRecordRazorModel RazorModel
@implements IRazorPage
@implements IDataGrid

<SfGrid @ref="Grid" TValue="ExceptionRecordAdapterModel"
        AllowPaging="true"
        Toolbar="RazorModel.Toolbaritems">
    <SfDataManager Adaptor="Adaptors.CustomAdaptor">
        <ExceptionRecordAdapter CurrentSortCondition="@RazorModel.CurrentSortCondition"></ExceptionRecordAdapter>
    </SfDataManager>
    <SfToolbar>
        <ToolbarItems>
            <ToolbarItem Type="ItemType.Input">
                <Template>
                    <span class="mx-2 mdi mdi-18px mdi-sort-variant" />
                    <SfDropDownList TValue="int" TItem="SortCondition"
                                    Placeholder="選擇排序條件" DataSource="@RazorModel.SortConditions">
                        <DropDownListFieldSettings Value="Id" Text="Title"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="int" TItem="SortCondition" ValueChange="@RazorModel.SortChanged"></DropDownListEvents>
                    </SfDropDownList>
                </Template>
            </ToolbarItem>
        </ToolbarItems>
    </SfToolbar>
    <GridEvents CommandClicked="RazorModel.OnCommandClicked" TValue="ExceptionRecordAdapterModel"
                OnToolbarClick="RazorModel.ToolbarClickHandler"
                RowSelected="RowSelectHandler" RowDeselected="RowDeselectHandler" />
    <GridPageSettings PageSize="@PageSize" />
    <GridColumns>
        <GridColumn Field=@nameof(ExceptionRecordAdapterModel.ExceptionTime) HeaderText="發生時間"
                    Format="yyyy-MM-dd HH:mm:ss" />
        <GridColumn Field=@nameof(ExceptionRecordAdapterModel.MyUserName) HeaderText="使用者" />
        <GridColumn Field=@nameof(ExceptionRecordAdapterModel.Message) HeaderText="異常訊息" />
        <GridColumn Field=@nameof(ExceptionRecordAdapterModel.OSType) HeaderText="作業系統" />
        <GridColumn Field=@nameof(ExceptionRecordAdapterModel.OSVersion) HeaderText="系統版本" />
        <GridColumn HeaderText="命令" Width="110" TextAlign="@TextAlign.Center">
            <GridCommandColumns>
                <GridCommandColumn ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = @ButtonIdHelper.ButtonIdDetail})" />
                <GridCommandColumn ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = ButtonIdHelper.ButtonIdDelete})" />
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @bind-Visible="@RazorModel.IsShowEditRecord" IsModal="true"
          Width="600px" Height="600px">
    <DialogTemplates>
        <Header>@RazorModel.EditRecordDialogTitle</Header>
        <Content>
            <EditForm Model="@RazorModel.CurrentRecord">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputWatcher EditContextActionChanged="@RazorModel.OnEditContestChanged" />

                <div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">發生時間</label>
                            <SfDateTimePicker TValue="DateTime"
                                              @bind-Value="RazorModel.CurrentRecord.ExceptionTime"
                                              Format="yyyy-MM-dd HH:mm:ss" Readonly="true" />
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.ExceptionTime)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">使用者</label>
                            <SfTextBox @bind-Value="RazorModel.CurrentRecord.MyUserName"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.MyUserName)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">異常訊息</label>
                            <SfTextBox @bind-Value="RazorModel.CurrentRecord.Message"
                                       Readonly="true" Multiline="true"/>
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.Message)" />
                        </div>
                    </div>


                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">呼叫堆疊</label>
                            <SfTextBox @bind-Value="RazorModel.CurrentRecord.CallStack"
                                       Readonly="true" Multiline="true" />
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.CallStack)" />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">作業系統</label>
                            <SfTextBox @bind-Value="RazorModel.CurrentRecord.OSType"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.OSType)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">系統版本</label>
                            <SfTextBox @bind-Value="RazorModel.CurrentRecord.OSVersion"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.OSVersion)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">裝置型號</label>
                            <SfTextBox @bind-Value="RazorModel.CurrentRecord.DeviceModel"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.DeviceModel)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">裝置名稱</label>
                            <SfTextBox @bind-Value="RazorModel.CurrentRecord.DeviceName"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => RazorModel.CurrentRecord.DeviceName)" />
                        </div>
                    </div>

                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div>
                <button type="submit" class="btn btn-primary" @onclick="RazorModel.OnRecordEditConfirm">儲存</button>
                <button class="btn btn-secondary" @onclick="RazorModel.OnRecordEditCancel">取消</button>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

@*<MyUserPicker OpenPicker="RazorModel.ShowAontherRecordPicker"
    OnConfirmCallback="x=>RazorModel.OnPickerCompletion(x)" />*@

<MessageBox Height="@RazorModel.MessageBox.Height" Width="@RazorModel.MessageBox.Width"
            IsVisible="@RazorModel.MessageBox.IsVisible"
            Title="@RazorModel.MessageBox.Title" Message="@RazorModel.MessageBox.Body"
            Callback="x=>RazorModel.MessageBox.Hidden()" />

<ConfirmBox Height="@RazorModel.ConfirmMessageBox.Height" Width="@RazorModel.ConfirmMessageBox.Width"
            IsVisible="@RazorModel.ConfirmMessageBox.IsVisible"
            Title="@RazorModel.ConfirmMessageBox.Title" Message="@RazorModel.ConfirmMessageBox.Body"
            Callback="x=>RazorModel.RemoveThisRecord(x)" />

<DialogBackground />

@code{
    SfGrid<ExceptionRecordAdapterModel> Grid;
    [Parameter]
    public int PageSize { get; set; } = 15;
    [Parameter]
    public EventCallback<MasterRecord> OnRecordChanged { get; set; }
    [Parameter]
    public EventCallback<object> OnViewRender { get; set; }

    #region 生命週期事件
    protected override void OnInitialized()
    {
        RazorModel.Setup(this, this);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            RazorModel.Setup(this, this);
        }
        if (OnViewRender.HasDelegate)
        {
            await OnViewRender.InvokeAsync(null);
        }
    }
    #endregion

    #region 頁面需要介面實作
    public void NeedRefresh()
    {
        StateHasChanged();
    }
    public async Task NeedInvokeAsync(System.Action action)
    {
        await InvokeAsync(action);
    }
    public void RefreshGrid()
    {
        Grid?.Refresh();
    }
    public bool GridIsExist()
    {
        return Grid == null ? false : true;
    }
    public Task InvokeGridAsync(string actionName)
    {
        return Task.CompletedTask;
    }
    #endregion


    #region 選取紀錄異動的事件處理
    public async Task RowSelectHandler(RowSelectEventArgs<ExceptionRecordAdapterModel> args)
    {
        if (OnRecordChanged.HasDelegate)
        {
            await OnRecordChanged.InvokeAsync(new MasterRecord()
            {
                Id = args.Data.Id,
                Title = MagicHelper.確認有表頭預設文字
            });
        }
    }
    public async Task RowDeselectHandler(RowDeselectEventArgs<ExceptionRecordAdapterModel> args)
    {
        if (OnRecordChanged.HasDelegate)
        {
            await OnRecordChanged.InvokeAsync(new MasterRecord()
            {
                Id = -2,
                Title = "",
            });
        }
    }
    #endregion
}
