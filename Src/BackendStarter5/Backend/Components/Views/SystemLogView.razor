@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons

@inject SystemLogViewModel ViewModel
@implements IRazorPage
@implements IDataGrid

<div>
    <SfGrid @ref="Grid" TValue="SystemLogAdapterModel"
            AllowPaging="true" class="parentFullWidth"
            Toolbar="ViewModel.Toolbaritems">
        <SfDataManager Adaptor="Adaptors.CustomAdaptor">
            <SystemLogAdapter CurrentSortCondition="@ViewModel.CurrentSortCondition"></SystemLogAdapter>
        </SfDataManager>
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem Type="ItemType.Input">
                    <Template>
                        <span class="mx-2 mdi mdi-18px mdi-sort-variant" />
                        <SfDropDownList TValue="int" TItem="SortCondition"
                                        Placeholder="選擇排序條件" DataSource="@ViewModel.SortConditions">
                            <DropDownListFieldSettings Value="Id" Text="Title"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int" TItem="SortCondition" ValueChange="@ViewModel.SortChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
        <GridEvents CommandClicked="ViewModel.OnCommandClicked" TValue="SystemLogAdapterModel"
                    OnToolbarClick="ViewModel.ToolbarClickHandler" />
        <GridPageSettings PageSize="@PageSize" />
        <GridColumns>
            <GridColumn Field=@nameof(SystemLogAdapterModel.Message)
                        HeaderText="訊息" />
            <GridColumn Field=@nameof(SystemLogAdapterModel.Category)
                        HeaderText="分類"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(SystemLogAdapterModel.LogLevel)
                        HeaderText="日誌等級"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(SystemLogAdapterModel.IP)
                        HeaderText="IP"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(SystemLogAdapterModel.Updatetime)
                        HeaderText="時間" Format="yyyyMMdd HHmmss" />
            <GridColumn HeaderText="命令" Width="@MagicHelper.DataGrid2個命令寬度" TextAlign="@TextAlign.Center"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "p-0 m-0" }})">
                <GridCommandColumns>
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameRead"
                                       ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = @ButtonIdHelper.ButtonIdRead})" />
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<SfDialog @bind-Visible="@ViewModel.IsShowEditRecord" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>@ViewModel.EditRecordDialogTitle</Header>
        <Content>
            <EditForm Model="@ViewModel.CurrentRecord">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputWatcher EditContextActionChanged="@ViewModel.OnEditContestChanged" />

                <div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">分類</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Category"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Category)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">日誌等級</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.LogLevel"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.LogLevel)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">訊息</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Message"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Message)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">其他內容</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Content"
                                       Readonly="true" Multiline="true" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Content)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">使用者 IP</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.IP"
                                       Readonly="true" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.IP)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">紀錄時間</label>
                            <SfDateTimePicker @bind-Value="ViewModel.CurrentRecord.Updatetime"
                                              Format="yyyyMMdd HHmmss"
                                              Readonly="true" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Updatetime)" />
                        </div>
                    </div>

                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div>
                <SfButton CssClass="e-secondary" @onclick="ViewModel.OnRecordEditCancel">關閉</SfButton>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<MessageBox Height="@ViewModel.MessageBox.Height" Width="@ViewModel.MessageBox.Width"
            IsVisible="@ViewModel.MessageBox.IsVisible"
            Title="@ViewModel.MessageBox.Title" Message="@ViewModel.MessageBox.Body"
            Callback="ViewModel.MessageBox.MessageDelegate" />

<ConfirmBox Height="@ViewModel.ConfirmMessageBox.Height" Width="@ViewModel.ConfirmMessageBox.Width"
            IsVisible="@ViewModel.ConfirmMessageBox.IsVisible"
            Title="@ViewModel.ConfirmMessageBox.Title" Message="@ViewModel.ConfirmMessageBox.Body"
            Callback="ViewModel.ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />
<DataGridCss/>

@code{
    SfGrid<SystemLogAdapterModel> Grid;
    [Parameter]
    public int PageSize { get; set; } = 15;
    [Parameter]
    public EventCallback<MasterRecord> OnRecordChanged { get; set; }
    [Parameter]
    public EventCallback<object> OnViewRender { get; set; }

    #region 生命週期事件
    protected override void OnInitialized()
    {
        ViewModel.Setup(this, this);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            ViewModel.Setup(this, this);
        }
        if (OnViewRender.HasDelegate)
        {
            await OnViewRender.InvokeAsync(null);
        }
    }
    #endregion

    #region 頁面需要介面實作
    public async Task NeedRefreshAsync()
    {
        await InvokeAsync(async () =>
        {
            await RenderDelayHelper.Delay();
            StateHasChanged();
        });
    }

    public async Task NeedInvokeAsync(System.Action action)
    {
        await InvokeAsync(action);
    }
    public void RefreshGrid()
    {
        Grid?.Refresh();
    }
    public bool GridIsExist()
    {
        return Grid == null ? false : true;
    }
    public Task InvokeGridAsync(string actionName)
    {
        return Task.CompletedTask;
    }
    #endregion

}
