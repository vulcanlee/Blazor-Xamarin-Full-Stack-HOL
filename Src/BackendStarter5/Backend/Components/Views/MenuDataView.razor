@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons

@inject MenuDataViewModel ViewModel
@implements IRazorPage
@implements IDataGrid

<div>
    <SfGrid @ref="Grid" TValue="MenuDataAdapterModel"
            AllowPaging="true"
            Toolbar="ViewModel.Toolbaritems">
        <SfDataManager Adaptor="Adaptors.CustomAdaptor">
            <MenuDataAdapter CurrentSortCondition="@ViewModel.CurrentSortCondition"
                             HeaderID="@ViewModel.Header.Id"></MenuDataAdapter>
        </SfDataManager>
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem Type="ItemType.Input">
                    <Template>
                        <span class="mx-2 mdi mdi-18px mdi-sort-variant" />
                        <SfDropDownList TValue="int" TItem="SortCondition"
                                        Placeholder="選擇排序條件" DataSource="@ViewModel.SortConditions">
                            <DropDownListFieldSettings Value="Id" Text="Title"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="int" TItem="SortCondition" ValueChange="@ViewModel.SortChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
        <GridEvents CommandClicked="ViewModel.OnCommandClicked" TValue="MenuDataAdapterModel"
                    OnToolbarClick="ViewModel.ToolbarClickHandler"/>
        <GridPageSettings PageSize="@PageSize" />
        <GridColumns>
            <GridColumn Field=@nameof(MenuDataAdapterModel.Name) HeaderText="名稱" />
            <GridColumn Field=@nameof(MenuDataAdapterModel.IsGroupName) HeaderText="子功能表"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(MenuDataAdapterModel.Level) HeaderText="層級"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(MenuDataAdapterModel.Sequence) HeaderText="順序"
                        HideAtMedia="(min-width: 640px)" />
            <GridColumn Field=@nameof(MenuDataAdapterModel.Enable)
                        HeaderText="啟用" Width="@MagicHelper.DataGrid狀態寬度" TextAlign="TextAlign.Center" 
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "p-0 m-0" }})">
                <Template>
                    @{
                        var currentRec = (context as MenuDataAdapterModel);
                        if (currentRec.Enable == true)
                        {
                            <span class="mdi @MagicHelper.DataGrid圖示大小 mdi-play-circle mx-2 text-success cursor-pointer"
                                  @onclick="x=>ViewModel.DisableIt(currentRec)" />
                        }
                        else
                        {
                            <span class="mdi @MagicHelper.DataGrid圖示大小 mdi-stop-circle mx-2 text-danger cursor-pointer"
                                  @onclick="x=>ViewModel.EnableIt(currentRec)" />
                        }
                    }
                </Template>


            </GridColumn>
            <GridColumn HeaderText="命令" Width="@MagicHelper.DataGrid2個命令寬度" TextAlign="@TextAlign.Center"
                        CustomAttributes="@(new Dictionary<string, object>(){ { "class", "p-0 m-0" }})">
                <GridCommandColumns>
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameEdit"
                                       ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = @ButtonIdHelper.ButtonIdEdit})" />
                    <GridCommandColumn Title="@ButtonIdHelper.ButtonNameDelete"
                                       ButtonOption="@(new CommandButtonOptions()
                                                   { Content = "", IconCss = ButtonIdHelper.ButtonIdDelete})" />
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<SfDialog @bind-Visible="@ViewModel.IsShowEditRecord" IsModal="true"
          Width="95%" Height="100%" CssClass="dialogSize">
    <DialogTemplates>
        <Header>@ViewModel.EditRecordDialogTitle</Header>
        <Content>
            <EditForm Model="@ViewModel.CurrentRecord">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputWatcher EditContextActionChanged="@ViewModel.OnEditContestChanged" />

                <div>
                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">名稱</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Name"
                                       Placeholder="請輸入該訂單項目的商品名稱" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Name)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">是否為子功能表</label>
                            <SfCheckBox @bind-Checked="ViewModel.CurrentRecord.IsGroup" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.IsGroup)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">層級</label>
                            <SfNumericTextBox @bind-Value="ViewModel.CurrentRecord.Level"
                                              Placeholder="請輸入介於 0~1 的整數數值" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Level)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">排序值</label>
                            <SfNumericTextBox @bind-Value="ViewModel.CurrentRecord.Sequence"
                                              Placeholder="請輸入大於 1 的整數數值" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Sequence)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">Icon名稱</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.Icon"
                                       Placeholder="請輸入Icon名稱" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Icon)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">路由作業代碼</label>
                            <SfTextBox @bind-Value="ViewModel.CurrentRecord.CodeName"
                                       Placeholder="請輸入路由作業代碼" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.CodeName)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">啟用</label>
                            <SfCheckBox @bind-Checked="@ViewModel.CurrentRecord.Enable" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.Enable)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col">
                            <label class="control-label">強制瀏覽器從伺服器載入新的頁面</label>
                            <SfCheckBox @bind-Checked="@ViewModel.CurrentRecord.ForceLoad" />
                            <ValidationMessage For="@(() => ViewModel.CurrentRecord.ForceLoad)" />
                        </div>
                    </div>

                </div>
            </EditForm>
        </Content>
        <FooterTemplate>
            <div>
                <SfButton type="submit" CssClass="e-primary" @onclick="ViewModel.OnRecordEditConfirm">儲存</SfButton>
                <SfButton CssClass="e-secondary" @onclick="ViewModel.OnRecordEditCancel">取消</SfButton>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="center" Y="center"></DialogPositionData>
</SfDialog>

<ProductPicker OpenPicker="ViewModel.ShowAontherRecordPicker"
               OnConfirmCallback="x=>ViewModel.OnPickerCompletion(x)" />

<MessageBox Height="@ViewModel.MessageBox.Height" Width="@ViewModel.MessageBox.Width"
            IsVisible="@ViewModel.MessageBox.IsVisible"
            Title="@ViewModel.MessageBox.Title" Message="@ViewModel.MessageBox.Body"
            Callback="ViewModel.MessageBox.MessageDelegate" />

<ConfirmBox Height="@ViewModel.ConfirmMessageBox.Height" Width="@ViewModel.ConfirmMessageBox.Width"
            IsVisible="@ViewModel.ConfirmMessageBox.IsVisible"
            Title="@ViewModel.ConfirmMessageBox.Title" Message="@ViewModel.ConfirmMessageBox.Body"
            Callback="ViewModel.ConfirmMessageBox.ConfirmDelegate" />

<DialogBackground />
<DataGridCss/>

@code{
    SfGrid<MenuDataAdapterModel> Grid;
    [Parameter]
    public MasterRecord Header { get; set; } = new MasterRecord();
    [Parameter]
    public int PageSize { get; set; } = 15;
    [Parameter]
    public EventCallback<MasterRecord> OnRecordChanged { get; set; }
    [Parameter]
    public EventCallback<object> OnViewRender { get; set; }

    #region 生命週期事件
    protected override void OnInitialized()
    {
        ViewModel.Setup(this, this);
    }
    protected override void OnParametersSet()
    {
        if (Header != null)
        {
            ViewModel.Header = Header;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            ViewModel.Setup(this, this);
        }
        if (OnViewRender.HasDelegate)
        {
            await OnViewRender.InvokeAsync(null);
        }
    }
    #endregion

    #region 頁面需要介面實作
    public async Task NeedRefreshAsync()
    {
        await InvokeAsync(async () =>
        {
            await RenderDelayHelper.Delay();
            StateHasChanged();
        });
    }

    public async Task NeedInvokeAsync(System.Action action)
    {
        await InvokeAsync(action);
    }
    public void RefreshGrid()
    {
        Grid?.Refresh();
    }
    public bool GridIsExist()
    {
        return Grid == null ? false : true;
    }
    public Task InvokeGridAsync(string actionName)
    {
        return Task.CompletedTask;
    }
    #endregion
}
