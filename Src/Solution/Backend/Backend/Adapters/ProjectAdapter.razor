@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Data;
@using Newtonsoft.Json
@using Backend.SortModels
@using Backend.Services
@using Backend.AdapterModels
@using Entities.Models
@using ShareDomain.DataModels
@using AutoMapper
@inherits DataAdaptor<IProjectService>
@inject IMapper Mapper

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public SortCondition CurrentSortCondition { get; set; }

    public override async Task<object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
    {
        #region 建立查詢物件
        DataRequest dataRequest = new DataRequest()
        {
            Skip = dataManagerRequest.Skip,
            Take = dataManagerRequest.Take,
        };
        if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
        {
            var keyword = dataManagerRequest.Search[0].Key;
            dataRequest.Search = keyword;
        }
        if (CurrentSortCondition != null)
        {
            dataRequest.Sorted = CurrentSortCondition;
        }
        #endregion

        #region 發出查詢要求
        DataRequestResult<ProjectAdapterModel> adaptorModelObjects = await Service.GetAsync(dataRequest);
        var item = dataManagerRequest.RequiresCounts
            ? new DataResult() { Result = adaptorModelObjects.Result, Count = adaptorModelObjects.Count }
            : (object)adaptorModelObjects.Result;
        await Task.Yield();
        return item;
        #endregion
    }
}