@using Syncfusion.Blazor.Notifications
@using System.Threading;
@using System.Security.Claims
@using Microsoft.Extensions.Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMyUserService MyUserService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@using Prism.Events
@inject IEventAggregator EventAggregator
@implements IDisposable

@code {
    public ToastMessageModel ToastModel { get; set; } = new ToastMessageModel();
    Task CheckUserTask;
    CancellationTokenSource cts;
    ClaimsPrincipal user;
    bool IsRunning = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int CheckUserStateInterval = Convert.ToInt32(Configuration["CheckUserStateInterval"]);
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                cts = new CancellationTokenSource();
                CheckUserTask = Task.Run(async () =>
                {
                    while (cts.Token.IsCancellationRequested == false && IsRunning == true)
                    {
                        try
                        {
                            var userId = Convert.ToInt32(user.FindFirst(ClaimTypes.Sid)?.Value);
                            var myUser = await MyUserService.GetAsync(userId);
                            if (myUser.Account.ToLower() != MagicHelper.開發者帳號)
                            {
                                if (myUser.Status == false)
                                {
                                    ToastModel.Title = "重要通知";
                                    ToastModel.Content = "使用者已經被停用，5秒鐘後，將會強制登出";
                                    EventAggregator.GetEvent<ToastEvent>().Publish(new ToastPayload()
                                    {
                                        Title = "重要通知",
                                        Content = "使用者已經被停用，5秒鐘後，將會強制登出",
                                        Timeout = 5000,
                                        Color="Green",

                                    });
                                    //ToastObj.Title = ToastModel.Title;
                                    //ToastObj.Content = ToastModel.Content;
                                    //await ToastObj.Show();
                                    await Task.Delay(5000);
                                    NavigationManager.NavigateTo("/Logout", true);
                                    IsRunning = false;
                                    continue;
                                }
                            }
                            await Task.Delay(CheckUserStateInterval, cts.Token);
                        }
                        catch
                        {
                            IsRunning = false;
                        }
                    }
                });
            }
            else
            {
            }
        }
    }
    public void Dispose()
    {
        if (cts != null && cts.IsCancellationRequested == false)
        {
            cts.Cancel();
            CheckUserTask = null;
        }
    }
}
