@using Syncfusion.Blazor.Notifications
@using System.Threading;
@using System.Security.Claims
@using Microsoft.Extensions.Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMyUserService MyUserService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@using Prism.Events
@inject IEventAggregator EventAggregator
@implements IDisposable

<ToastView />

@*<button @onclick="click">Send</button>*@
@*<SfToast @ref="ToastObj"
         Timeout="5000">
    <ToastPosition X="Right" Y="Top"></ToastPosition>
</SfToast>*@
@*Title="@ToastModel.Title" Content="@ToastModel.Content"*@

@*<style>
    /* To change background color */
    .e-toast-container .e-toast {
        background-color: orange;
    }

        /* To change color, font family and font size */
        .e-toast-container .e-toast .e-toast-message .e-toast-title {
            color: white;
            font-size: 18px;
            font-weight: bold;
        }

        /* To change color, font family and font size */
        .e-toast-container .e-toast .e-toast-message .e-toast-content {
            color: white;
            font-size: 13px;
            font-weight: normal;
        }
</style>*@

@code {
    SfToast ToastObj;
    public ToastMessageModel ToastModel { get; set; } = new ToastMessageModel();
    Task CheckUserTask;
    CancellationTokenSource cts;
    ClaimsPrincipal user;
    bool IsRunning = true;

    async Task click()
    {
        ToastModel.Title = "重要通知~~";
        ToastModel.Content = "使用者已經被停用，5秒鐘後，將會強制登出~~";
        EventAggregator.GetEvent<ToastEvent>().Publish(new ToastPayload()
        {
            Title = "重要通知",
            Content = "使用者已經被停用，5秒鐘後，將會強制登出",
            Timeout = 5000,
        });


        //ToastModel.Title = "重要通知~~";
        //ToastModel.Content = "使用者已經被停用，5秒鐘後，將會強制登出~~";
        //ToastObj.Title = ToastModel.Title;
        //ToastObj.Content = ToastModel.Content;
        //await Task.Delay(100);
        //await ToastObj.Show();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int CheckUserStateInterval = Convert.ToInt32(Configuration["CheckUserStateInterval"]);
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                cts = new CancellationTokenSource();
                CheckUserTask = Task.Run(async () =>
                {
                    while (cts.Token.IsCancellationRequested == false && IsRunning == true)
                    {
                        try
                        {
                            var userId = Convert.ToInt32(user.FindFirst(ClaimTypes.Sid)?.Value);
                            var myUser = await MyUserService.GetAsync(userId);
                            if (myUser.Account.ToLower() != MagicHelper.開發者帳號)
                            {
                                if (myUser.Status == false)
                                {
                                    ToastModel.Title = "重要通知";
                                    ToastModel.Content = "使用者已經被停用，5秒鐘後，將會強制登出";
                                    EventAggregator.GetEvent<ToastEvent>().Publish(new ToastPayload()
                                    {
                                        Title = "重要通知",
                                        Content = "使用者已經被停用，5秒鐘後，將會強制登出",
                                        Timeout = 5000,
                                    });
                                    //ToastObj.Title = ToastModel.Title;
                                    //ToastObj.Content = ToastModel.Content;
                                    //await ToastObj.Show();
                                    await Task.Delay(5000);
                                    NavigationManager.NavigateTo("/Logout", true);
                                    IsRunning = false;
                                    continue;
                                }
                            }
                            await Task.Delay(CheckUserStateInterval, cts.Token);
                        }
                        catch
                        {
                            IsRunning = false;
                        }
                    }
                });
            }
            else
            {
            }
        }
    }
    public void Dispose()
    {
        if (cts != null && cts.IsCancellationRequested == false)
        {
            cts.Cancel();
            CheckUserTask = null;
        }
    }
}
